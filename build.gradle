buildscript {
    ext {
        springBootVersion = '2.6.2'
        lombokVersion = '1.18.22'
        gsonVersion = '2.8.9'
        junitJupiterVersion = '5.8.2'
        mockitoVersion = '4.2.0'
        springfoxSwagger = '3.0.0'
        springdocOpenapiUiVersion = '1.6.3'
        mysqlConnectorJavaVersion = '8.0.27'
        postgresqlVersion = '42.3.1'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
//apply plugin: 'war'

group = 'pro.ruloff'
version = '0.0.3'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter:${junitJupiterVersion}")
    testImplementation("org.mockito:mockito-core:${mockitoVersion}")
    testImplementation("org.mockito:mockito-junit-jupiter:${mockitoVersion}")
    testImplementation("org.mockito:mockito-inline:${mockitoVersion}")
    testImplementation("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-mail:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
    implementation("com.google.code.gson:gson:${gsonVersion}")
    implementation("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")

//	providedRuntime("org.springframework.boot:spring-boot-starter-tomcat:${springBootVersion}")

    // Swagger
    implementation("org.springdoc:springdoc-openapi-ui:${springdocOpenapiUiVersion}")

    // Databases
//    implementation("mysql:mysql-connector-java:${mysqlConnectorJavaVersion}")
	implementation("org.postgresql:postgresql:${postgresqlVersion}")
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    beforeTest { descriptor -> logger.lifecycle("Running test: " + descriptor) }
    failFast(false)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
    }
}

task stage(dependsOn: ['bootJar'])

tasks.stage.doLast() {
    delete fileTree(dir: "build/distributions")
    delete fileTree(dir: "build/assetCompile")
    delete fileTree(dir: "build/distributions")
    delete fileTree(dir: "build/libs", exclude: "*.jar")
    //delete everything except jar file inside build folder
}

jar { //Don't package test folders and files
    exclude "test/**"
    exclude "test/**/**"
    manifest {
        attributes(
                'Main-Class': 'pro.ruloff.tasks.TasksApplication'
        )
    }
}

bootJar { //Exclude test files when pack boot jar file
    enabled = true
    exclude "test/**"
    exclude "test/**/**"
}
